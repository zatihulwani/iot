{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/contoh/node_modules/babel-loader/lib/index.js!/Applications/XAMPP/xamppfiles/htdocs/contoh/node_modules/eslint-loader/index.js??ref--13-0!/Applications/XAMPP/xamppfiles/htdocs/contoh/src/services/ApiService.js","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/contoh/src/services/ApiService.js","mtime":1554002966000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/contoh/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/contoh/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/contoh/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Promise from \"/Applications/XAMPP/xamppfiles/htdocs/contoh/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport Axios from 'axios';\nimport store from '../store';\nimport { TokenService } from './TokenService'; //create axios instance\n\nvar instanceAxios = Axios.create({\n  baseURL: 'http://iotdashboard.wg.ugm.ac.id'\n}); //update token every request\n\ninstanceAxios.interceptors.request.use(function (config) {\n  // get token from vuex\n  var token = TokenService.getTokenVuex().access_token;\n  config.headers.Authorization = \"Bearer \".concat(token);\n  return config;\n}, function (error) {\n  return _Promise.reject(error);\n}); //if response 401 or 403, logout user\n\ninstanceAxios.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response.status === 401 || error.response.status === 403) {\n    alert('FORBIDDEN');\n    console.log('authentication failed, token has been changed locally');\n\n    _Promise.resolve(store.dispatch('removeAuth'));\n  }\n\n  throw error;\n}); //specify endpoint API function\n\nvar endpoint = {\n  getAllUser: function getAllUser() {\n    return instanceAxios.get('/api/users');\n  },\n  getDevice: function getDevice() {\n    return instanceAxios.get('/api/devices');\n  },\n  getRole: function getRole() {\n    return instanceAxios.get('/api/roles');\n  },\n  getProfile: function getProfile() {\n    return instanceAxios.get('/api/profile');\n  },\n  postUser: function postUser(data) {\n    return instanceAxios.post('/api/users', data);\n  },\n  login: function login(data) {\n    return instanceAxios.post('/oauth/token', data);\n  }\n};\nexport default endpoint;",{"version":3,"sources":["/Applications/XAMPP/xamppfiles/htdocs/contoh/src/services/ApiService.js"],"names":["Axios","store","TokenService","instanceAxios","create","baseURL","interceptors","request","use","config","token","getTokenVuex","access_token","headers","Authorization","error","reject","response","status","alert","console","log","resolve","dispatch","endpoint","getAllUser","get","getDevice","getRole","getProfile","postUser","data","post","login"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SACEC,YADF,QAEO,gBAFP,C,CAIA;;AACA,IAAIC,aAAa,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE;AADsB,CAAb,CAApB,C,CAIA;;AACAF,aAAa,CAACG,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACE,UAAAC,MAAM,EAAI;AACR;AACA,MAAMC,KAAK,GAAGR,YAAY,CAACS,YAAb,GAA4BC,YAA1C;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,oBAAyCJ,KAAzC;AACA,SAAOD,MAAP;AACD,CANH,EAOE,UAAAM,KAAK;AAAA,SAAI,SAAQC,MAAR,CAAeD,KAAf,CAAJ;AAAA,CAPP,E,CAUA;;AACAZ,aAAa,CAACG,YAAd,CAA2BW,QAA3B,CAAoCT,GAApC,CAAwC,UAAAS,QAAQ,EAAI;AAClD,SAAOA,QAAP;AACD,CAFD,EAEG,UAAAF,KAAK,EAAI;AACV,MAAIA,KAAK,CAACE,QAAN,CAAeC,MAAf,KAA0B,GAA1B,IAAiCH,KAAK,CAACE,QAAN,CAAeC,MAAf,KAA0B,GAA/D,EAAoE;AAClEC,IAAAA,KAAK,CAAC,WAAD,CAAL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ;;AACA,aAAQC,OAAR,CAAgBrB,KAAK,CAACsB,QAAN,CAAe,YAAf,CAAhB;AACD;;AACD,QAAMR,KAAN;AACD,CATD,E,CAWA;;AACA,IAAIS,QAAQ,GAAG;AAEbC,EAAAA,UAFa,wBAEA;AACX,WAAOtB,aAAa,CAACuB,GAAd,CAAkB,YAAlB,CAAP;AACD,GAJY;AAMbC,EAAAA,SANa,uBAMD;AACV,WAAOxB,aAAa,CAACuB,GAAd,CAAkB,cAAlB,CAAP;AACD,GARY;AAUbE,EAAAA,OAVa,qBAUH;AACR,WAAOzB,aAAa,CAACuB,GAAd,CAAkB,YAAlB,CAAP;AACD,GAZY;AAcbG,EAAAA,UAda,wBAcA;AACX,WAAO1B,aAAa,CAACuB,GAAd,CAAkB,cAAlB,CAAP;AACD,GAhBY;AAkBbI,EAAAA,QAlBa,oBAkBJC,IAlBI,EAkBE;AACb,WAAO5B,aAAa,CAAC6B,IAAd,CAAmB,YAAnB,EAAiCD,IAAjC,CAAP;AACD,GApBY;AAsBbE,EAAAA,KAtBa,iBAsBPF,IAtBO,EAsBD;AACV,WAAO5B,aAAa,CAAC6B,IAAd,CAAmB,cAAnB,EAAmCD,IAAnC,CAAP;AACD;AAxBY,CAAf;AA2BA,eAAeP,QAAf","sourcesContent":["import Axios from 'axios';\nimport store from '../store';\nimport {\n  TokenService\n} from './TokenService';\n\n//create axios instance\nlet instanceAxios = Axios.create({\n  baseURL: 'http://iotdashboard.wg.ugm.ac.id'\n});\n\n//update token every request\ninstanceAxios.interceptors.request.use(\n  config => {\n    // get token from vuex\n    const token = TokenService.getTokenVuex().access_token;\n    config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  error => Promise.reject(error)\n);\n\n//if response 401 or 403, logout user\ninstanceAxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response.status === 401 || error.response.status === 403) {\n    alert('FORBIDDEN');\n    console.log('authentication failed, token has been changed locally');\n    Promise.resolve(store.dispatch('removeAuth'));\n  }\n  throw error;\n});\n\n//specify endpoint API function\nlet endpoint = {\n\n  getAllUser() {\n    return instanceAxios.get('/api/users');\n  },\n\n  getDevice() {\n    return instanceAxios.get('/api/devices');\n  },\n\n  getRole() {\n    return instanceAxios.get('/api/roles');\n  },\n\n  getProfile() {\n    return instanceAxios.get('/api/profile');\n  },\n\n  postUser(data) {\n    return instanceAxios.post('/api/users', data);\n  },\n\n  login(data) {\n    return instanceAxios.post('/oauth/token', data);\n  }\n};\n\nexport default endpoint;"]}]}